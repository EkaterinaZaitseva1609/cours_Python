# dict - неупорядоченная коллекция произвольных объектов с доступом по ключу, еще называют ассоциативным списком
# 'moskva' - 495
# 'piter' - 812
# 'penza' - 8412

# создание словаря, способ 1
# a = {
#     'moskva': 495,
#     'piter' :812,
#     'penza' :8412
# }
# print(a)

# создание словаря, способ 2 (если в качестве ключей используются строковые типы, например moskva, penza, piter)
# r = dict(moskva=495, piter=812, penza=8412)
# print(r)

# создание словаря, способ 3 (каждый вложенный элемент состоит из ключа и значения, ['moskva - ключ', 495 - значение])
# d = [['moskva', 495], ['piter', 812], ['penza', 8412]]
# t = dict(d)
# print(t)

# создание словаря, способ 4, метод fromkeys каждый элемент нашего списка превращает в ключ и автоматически присваивает в значение ключа None
# q = dict.fromkeys(['a', 'b', 'c'])
# print(q)  #консоль {'a': None, 'b': None, 'c': None}
# q = dict.fromkeys(['a', 'b', 'c'],100)
# print(q)   #консоль {'a': 100, 'b': 100, 'c': 100}

# создание словаря, способ 5 = пустой словарь
# c={}
# print(c, type(c))
# или пустой словарь
# p = dict()
# print(p, type(p))

# Типы ключей и их значений: ключем не может быть изменяемы тип объекта = список,

# a = {
#     1: 'one',
#     2: 'two',
#     3: 'three'
# }
# print(a)

# b = {
#     1: 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# print(b)

# Как обратиться к значению словаря? = ответ: по ключу
# b = {
#     'one': 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# print(b[2])
# print(b['one'])

#Добавить значение в словарь

# b = {
#     'one': 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# b[4] = 'four'
# print(b)

#Заменить значение в словаре тоже можно обратившись к ключу

# b = {
#     'one': 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# b[3] = 'four'
# print(b) #  консоль = {'one': 45, 2: 'two', 3: 'four'}

#Работа со словаем
# person = {}
# s = 'Ivanov Ivan Novosibirsk NGU  5 5 4 5 4 5 5 5 4'
# s = s.split()
# print(s)
# person['lastname'] = s[0]
# person['name'] = s[1]
# person['city'] = s[2]
# person['university'] = s[3]
# person['marks']  =[]
# for i in s[4:]:
#     person['marks'].append(int(i))
# print(person)

# удалить из словоря, нужно обратиться к словарю по ключу и использовать функцию del
# del person['city']
# print(person)

#Функции, которые поддерживают словари

# b = {
#     1: 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# print(len(b)) #проверить длину словаря

# print(1 in b, 4 in b, 7 not in b) #проверить, есть ли в словаре элемент с таким ключом True False True

# if 5 in b:
#     print(b(5))
# else:
#     b[5] = 'Jun'
# print(b)

#Цикл for
# b = {
#     1: 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# for i in b:
    # print(i) # в i  присваивается значение ключа
    # print(i, b[i]) #выводится ключ и его значение

# b.clear() #очистить словарь
# print(b.get(1)) #получить значение по ключу
# print(b.setdefault(2)) #выводить значение по ключу, либо если значение с таким ключом нет, создает его с указанным значением
# print(b.setdefault(7, 'seven'))#{1: 45, 2: 'two', 3: [1, 2, 3], 7: 'seven'}
# print(b.pop(3)) #возвращает значение и удаляет его из словаря
# print(b.popitem()) #удаляет случайное значение
# print(b.values())#возврящает значения, без ключей
# print(b)

# for para in b.items(): #таким цикдлм можно обойти все пары в словаре
    # print(para) #выводятся оба элемента пары
    # print(para [0]) #ключи
    # print(para[1]) #значение


#Обратиться сразу и к ключу и к значению
# b = {
#     1: 45,
#     2: 'two',
#     3: [1, 2, 3]
# }
# for key, value in b.items():
#     print(key, value)



















